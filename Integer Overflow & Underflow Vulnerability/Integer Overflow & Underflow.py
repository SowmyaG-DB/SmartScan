import networkx as nx
import subprocess
import os
import matplotlib.pyplot as plt

# Paths to required files and binaries
smv_file = "C:\\Users\\hp\\Documents\\2025 prjs\\Mrs. Soumya\\model.smv"
nuxmv_path = "C:\\Users\\hp\\Documents\\2025 prjs\\Mrs. Soumya\\nuXmv-2.1.0-win64\\nuXmv-2.1.0-win64\\bin\\nuXmv.exe"
command_file = "C:\\Users\\hp\\Documents\\2025 prjs\\Mrs. Soumya\\commands.txt"

# Step 1: Solidity to BIP Conversion
def solidity_to_bip(solidity_code):
    """Converts Solidity code to a BIP model."""
    functions = extract_functions(solidity_code)
    state_variables = extract_state_variables(solidity_code)
    control_flows = extract_control_flows(solidity_code)
    return {"functions": functions, "state_variables": state_variables, "control_flows": control_flows}

def extract_functions(solidity_code): return ["increment"]
def extract_state_variables(solidity_code): return ["count"]
def extract_control_flows(solidity_code): return ["arithmetic"]

# Step 2: BIP to FSM Conversion
def bip_to_fsm(bip_model):
    """Converts BIP model to FSM."""
    fsm = nx.DiGraph()
    states = ["Start", "CountIncremented"]
    transitions = [("Start", "CountIncremented"), ("CountIncremented", "CountIncremented")]
    fsm.add_nodes_from(states)
    fsm.add_edges_from(transitions)
    return fsm

# Step 3: Symbolic Model Checking with NuXmv
def write_smv_file(fsm, ctl_properties, output_file="model.smv"):
    """Writes FSM and CTL properties to an SMV file."""
    with open(output_file, "w") as f:
        f.write("MODULE main\nVAR\n state : {" + ", ".join(f'"{state}"' for state in fsm.nodes) + "};\n count : 0..255;\nASSIGN\n init(state) := \"Start\";\n init(count) := 255;\n next(state) := case\n")
        for edge in fsm.edges:
            f.write(f' state = "{edge[0]}" : "{edge[1]}";\n')
        f.write(" TRUE : state;\n esac;\n next(count) := case\n")
        f.write(' state = "Start" & next(state) = "CountIncremented" : (count + 1) mod 256;\n')
        f.write(' state = "CountIncremented" & next(state) = "CountIncremented" : (count + 1) mod 256;\n')
        f.write(" TRUE : count;\n esac;\n")
        for prop_name, ctl in ctl_properties.items():
            f.write(f"\n-- {prop_name}\nSPEC {ctl};\n")

def write_command_file(output_file="commands.txt"):
    with open(output_file, "w") as f:
        f.write("go_bmc\ncheck_ltlspec\n")

def run_nuxmv(smv_file, command_file):
    if not os.path.exists(nuxmv_path):
        raise FileNotFoundError(f"nuXmv binary not found at {nuxmv_path}")
    try:
        result = subprocess.run([nuxmv_path, "-source", command_file, smv_file], capture_output=True, text=True)
        return None if result.returncode != 0 else result.stdout
    except FileNotFoundError:
        print("NuXmv is not installed or not in PATH.")
        return None

def parse_counterexamples(nuxmv_output):
    return nuxmv_output[nuxmv_output.index("Counterexample"):] if nuxmv_output and "-- specification" in nuxmv_output and "is false" in nuxmv_output else "No counterexamples found."

# Step 5: Visualization
def visualize_fsm(fsm, filename="fsm_diagram.png"):
    plt.figure(figsize=(8, 6))
    pos = nx.spring_layout(fsm, seed=44)
    nx.draw(fsm, pos, with_labels=True, node_size=3500, node_color="lightblue", edge_color="gray", font_size=12)
    plt.title("FSM Visualization", fontsize=14)
    plt.savefig(filename, bbox_inches='tight')
    plt.show()

def visualize_state_transitions(fsm, filename="state_transitions.png"):
    plt.figure(figsize=(10, 6))
    transitions = list(fsm.edges)
    transition_counts = {edge: transitions.count(edge) for edge in transitions}
    plt.bar([f"{t[0]} â†’ {t[1]}" for t in transition_counts.keys()], transition_counts.values(), color="skyblue")
    plt.title("State Transition Frequencies", fontsize=14)
    plt.xlabel("Transitions", fontsize=12)
    plt.ylabel("Frequency", fontsize=12)
    plt.xticks(rotation=45, ha="right", fontsize=10)
    plt.tight_layout()
    plt.savefig(filename, bbox_inches='tight')
    plt.show()

# Example Usage
if __name__ == "__main__":
    solidity_code = """
    pragma solidity ^0.4.24;
    contract OverflowVuln {
        uint8 public count = 255;
        function increment() public {
            count += 1;
        }
    }
    """
    bip_model = solidity_to_bip(solidity_code)
    fsm = bip_to_fsm(bip_model)
    ctl_properties = {"No Overflow": "AG (count <= 255)", "Overflow Detection": "EF (count = 0)"}
    write_smv_file(fsm, ctl_properties)
    write_command_file(command_file)
    nuxmv_output = run_nuxmv(smv_file, command_file)
    if nuxmv_output:
        print(nuxmv_output)
        print("Counterexamples:", parse_counterexamples(nuxmv_output))
    else:
        print("NuXmv execution failed.")
    visualize_fsm(fsm)
    visualize_state_transitions(fsm)
