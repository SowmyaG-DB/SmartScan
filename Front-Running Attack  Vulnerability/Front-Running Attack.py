import networkx as nx
import subprocess
import os
import matplotlib.pyplot as plt

# Paths to required files and binaries
smv_file = "C:\\Users\\hp\\Documents\\2025 prjs\\Mrs. Soumya\\model.smv"
nuxmv_path = "C:\\Users\\hp\\Documents\\2025 prjs\\Mrs. Soumya\\nuXmv-2.1.0-win64\\nuXmv-2.1.0-win64\\bin\\nuXmv.exe"
command_file = "C:\\Users\\hp\\Documents\\2025 prjs\\Mrs. Soumya\\commands.txt"

# Step 1: Solidity to BIP Conversion
def solidity_to_bip(solidity_code):
    """Converts Solidity code to a BIP model."""
    functions = extract_functions(solidity_code)
    state_variables = extract_state_variables(solidity_code)
    control_flows = extract_control_flows(solidity_code)

    bip_model = {
        "functions": functions,
        "state_variables": state_variables,
        "control_flows": control_flows,
    }
    return bip_model

def extract_functions(solidity_code):
    """Extracts functions from Solidity code."""
    return ["bid"]

def extract_state_variables(solidity_code):
    """Extracts state variables from Solidity code."""
    return ["highestBidder", "highestBid"]

def extract_control_flows(solidity_code):
    """Extracts control flow structures from Solidity code."""
    return ["if", "require"]

# Step 2: BIP to FSM Conversion
def bip_to_fsm(bip_model):
    """Converts BIP model to FSM."""
    fsm = nx.DiGraph()

    states = ["Start", "BidPlaced"]
    transitions = [("Start", "BidPlaced")]

    fsm.add_nodes_from(states)
    fsm.add_edges_from(transitions)
    return fsm

# Step 3: Symbolic Model Checking with NuXmv
def write_smv_file(fsm, ctl_properties, output_file="model.smv"):
    """Writes FSM and CTL properties to an SMV file."""
    with open(output_file, "w") as f:
        f.write("MODULE main\n")
        f.write("VAR\n")
        f.write(" state : {" + ", ".join(f'"{state}"' for state in fsm.nodes) + "};\n")
        f.write(" highestBid : integer;\n")
        f.write("ASSIGN\n")
        f.write(" init(state) := \"Start\";\n")
        f.write(" init(highestBid) := 0;\n")

        f.write(" next(state) := case\n")
        for edge in fsm.edges:
            f.write(f' state = "{edge[0]}" : "{edge[1]}";\n')
        f.write(" TRUE : state;\n")
        f.write(" esac;\n")

        f.write(" next(highestBid) := case\n")
        f.write(' state = "Start" & next(state) = "BidPlaced" : highestBid + 10;\n')
        f.write(" TRUE : highestBid;\n")
        f.write(" esac;\n")

        for prop_name, ctl in ctl_properties.items():
            f.write(f"\n-- {prop_name}\n")
            f.write(f"SPEC {ctl};\n")

def write_command_file(output_file="commands.txt"):
    """Writes commands to a file for NuXmv."""
    with open(output_file, "w") as f:
        f.write("go_bmc\n")
        f.write("check_ltlspec\n")

def run_nuxmv(smv_file, command_file):
    """Runs the NuXmv model checker."""
    if not os.path.exists(nuxmv_path):
        raise FileNotFoundError(f"nuXmv binary not found at {nuxmv_path}")
    try:
        result = subprocess.run([nuxmv_path, "-source", command_file, smv_file], capture_output=True, text=True)
        if result.returncode != 0:
            print(f"NuXmv error: {result.stderr}")
            return None
        return result.stdout
    except FileNotFoundError:
        print("NuXmv is not installed or not in PATH.")
        return None

# Step 4: Counterexample Analysis
def parse_counterexamples(nuxmv_output):
    """Parses counterexamples from NuXmv output."""
    if nuxmv_output and "-- specification" in nuxmv_output and "is false" in nuxmv_output:
        start = nuxmv_output.index("Counterexample")
        return nuxmv_output[start:]
    return "No counterexamples found."

# Step 5: Visualization
def visualize_fsm(fsm, filename="fsm_diagram.png"):
    """Visualizes the FSM."""
    pos = nx.spring_layout(fsm)
    nx.draw(fsm, pos, with_labels=True, node_size=3000, node_color="lightblue")
    nx.draw_networkx_edges(fsm, pos, edge_color="gray")
    plt.title("FSM Visualization")
    plt.savefig(filename)
    plt.show()

def visualize_state_transitions(fsm, filename2="state_transitions.png"):
    """Visualizes state transitions."""
    transitions = list(fsm.edges)
    transition_counts = {edge: transitions.count(edge) for edge in transitions}
    plt.bar([f"{t[0]} → {t[1]}" for t in transition_counts.keys()], transition_counts.values(), color="skyblue")
    plt.title("State Transition Frequencies")
    plt.xlabel("Transitions")
    plt.ylabel("Frequency")
    plt.xticks(rotation=45, ha="right")
    plt.tight_layout()
    plt.savefig(filename2)
    plt.show()

# New Solidity Code
solidity_code = """
pragma solidity ^0.8.0;

contract FrontRunningVuln {
    address public highestBidder;
    uint public highestBid;

    function bid() public payable {
        require(msg.value > highestBid, "Bid too low");
        highestBidder = msg.sender;
        highestBid = msg.value; // ❌ Transactions can be front-run by bots
    }
}
"""

if __name__ == "__main__":
    bip_model = solidity_to_bip(solidity_code)
    fsm = bip_to_fsm(bip_model)
    ctl_properties = {
        "Bid Fairness": "AG (state != \"BidPlaced\" -> highestBid >= 0)",
    }
    write_smv_file(fsm, ctl_properties)
    write_command_file(command_file)
    nuxmv_output = run_nuxmv(smv_file, command_file)
    if nuxmv_output:
        print(nuxmv_output)
        counterexamples = parse_counterexamples(nuxmv_output)
        print("Counterexamples:", counterexamples)
    else:
        print("NuXmv execution failed.")
    visualize_fsm(fsm)
    visualize_state_transitions(fsm)
