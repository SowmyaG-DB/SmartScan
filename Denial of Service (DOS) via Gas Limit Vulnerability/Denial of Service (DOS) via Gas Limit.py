import networkx as nx
import subprocess
import os
import matplotlib.pyplot as plt

# Paths to required files and binaries
smv_file = "C:\\Users\\hp\\Documents\\2025 prjs\\Mrs. Soumya\\model.smv"
nuxmv_path = "C:\\Users\\hp\\Documents\\2025 prjs\\Mrs. Soumya\\nuXmv-2.1.0-win64\\nuXmv-2.1.0-win64\\bin\\nuXmv.exe"
command_file = "C:\\Users\\hp\\Documents\\2025 prjs\\Mrs. Soumya\\commands.txt"

# Updated Solidity Code (DOS Vulnerability)
solidity_code = """
pragma solidity ^0.8.0;
contract DOSVuln {
    address[] public funders;

    function fund() public payable {
        funders.push(msg.sender);
    }

    function withdraw() public {
        for (uint i = 0; i < funders.length; i++) {
            payable(funders[i]).transfer(1 ether); // ❌ If list grows, TX will fail
        }
    }
}
"""

# Step 1: Solidity to BIP Conversion
def solidity_to_bip(solidity_code):
    """Converts Solidity code to a BIP model."""
    functions = extract_functions(solidity_code)
    state_variables = extract_state_variables(solidity_code)
    control_flows = extract_control_flows(solidity_code)

    bip_model = {
        "functions": functions,
        "state_variables": state_variables,
        "control_flows": control_flows,
    }
    return bip_model

def extract_functions(solidity_code):
    return ["fund", "withdraw"]

def extract_state_variables(solidity_code):
    return ["funders"]

def extract_control_flows(solidity_code):
    return ["for-loop", "transfer"]

# Step 2: BIP to FSM Conversion
def bip_to_fsm(bip_model):
    """Converts BIP model to FSM."""
    fsm = nx.DiGraph()
    states = ["Start", "FundReceived", "FundsWithdrawn", "TransactionFailed"]
    transitions = [
        ("Start", "FundReceived"),
        ("FundReceived", "FundsWithdrawn"),
        ("FundReceived", "TransactionFailed"),  # DOS scenario if loop fails
    ]
    fsm.add_nodes_from(states)
    fsm.add_edges_from(transitions)
    return fsm

# Step 3: Symbolic Model Checking with NuXmv
def write_smv_file(fsm, ctl_properties, output_file="model.smv"):
    with open(output_file, "w") as f:
        f.write("MODULE main\n")
        f.write("VAR\n")
        f.write(" state : {" + ", ".join(f'"{state}"' for state in fsm.nodes) + "};\n")
        f.write("ASSIGN\n")
        f.write(" init(state) := \"Start\";\n")
        f.write(" next(state) := case\n")
        for edge in fsm.edges:
            f.write(f' state = "{edge[0]}" : "{edge[1]}";\n')
        f.write(" TRUE : state;\n")
        f.write(" esac;\n")
        for prop_name, ctl in ctl_properties.items():
            f.write(f"\n-- {prop_name}\n")
            f.write(f"SPEC {ctl};\n")

def write_command_file(output_file="commands.txt"):
    with open(output_file, "w") as f:
        f.write("go_bmc\n")
        f.write("check_ltlspec\n")

def run_nuxmv(smv_file, command_file):
    if not os.path.exists(nuxmv_path):
        raise FileNotFoundError(f"nuXmv binary not found at {nuxmv_path}")
    try:
        result = subprocess.run([nuxmv_path, "-source", command_file, smv_file], capture_output=True, text=True)
        if result.returncode != 0:
            print(f"NuXmv returned an error: {result.stderr}")
            return None
        return result.stdout
    except FileNotFoundError:
        print("NuXmv is not installed or not in PATH.")
        return None

# Step 4: Improved Visualization
def visualize_fsm(fsm, filename="fsm_diagram.png"):
    plt.figure(figsize=(10, 8))  # Increased figure size
    pos = nx.spring_layout(fsm, seed=42)  # Ensure stable layout
    nx.draw(fsm, pos, with_labels=True, node_size=5000, node_color="lightblue", font_size=14, edge_color="gray", width=2)
    plt.tight_layout()
    plt.savefig(filename, bbox_inches="tight")  # Adjust bounding box
    plt.show()

def visualize_state_transitions(fsm, filename="state_transitions.png"):
    transitions = list(fsm.edges)
    transition_counts = {edge: transitions.count(edge) for edge in transitions}

    plt.figure(figsize=(12, 6))  # Increased figure size
    plt.bar(
        [f"{t[0]} → {t[1]}" for t in transition_counts.keys()],
        transition_counts.values(),
        color="skyblue"
    )
    plt.xlabel("Transitions", fontsize=14)
    plt.ylabel("Frequency", fontsize=14)
    plt.xticks(rotation=45, ha="right", fontsize=12)
    plt.yticks(fontsize=12)
    plt.tight_layout()
    plt.savefig(filename, bbox_inches="tight")  # Adjust bounding box
    plt.show()

# Main Execution
if __name__ == "__main__":
    bip_model = solidity_to_bip(solidity_code)
    fsm = bip_to_fsm(bip_model)
    ctl_properties = {
        "DOS Prevention": "AG (state != \"TransactionFailed\")",
    }
    write_smv_file(fsm, ctl_properties)
    write_command_file(command_file)
    nuxmv_output = run_nuxmv(smv_file, command_file)
    if nuxmv_output:
        print(nuxmv_output)
    visualize_fsm(fsm)
    visualize_state_transitions(fsm)
